buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'org.unbroken-dome.gradle-plugins:gradle-xjc-plugin:1.1.3'
        classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.14.0"
    }
}

apply plugin: 'java'
apply plugin: 'osgi'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'org.unbroken-dome.xjc'
apply plugin: "license"

version = '1.0.5'
//version += '-SNAPSHOT'
//version += '.' + new Date().format("yyyyMMddHHmmss")
group = 'de.interactive_instruments'

repositories {
    mavenCentral()
}

configurations {
    doclava
}

dependencies {
    compile 'com.google.guava:guava:17.0'
    //compile 'org.apache.ws.xmlschema:xmlschema-core:2.2.2'
    compile 'org.apache.ws.commons.schema:XmlSchema:1.4.7'
    compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.0'

    compileOnly         "org.immutables:value:2.7.1:annotations"
    annotationProcessor "org.immutables:value:2.7.1"

    testCompile "junit:junit:4.12"
    testCompile "org.xmlunit:xmlunit-core:2.5.1"
    testCompile "org.xmlunit:xmlunit-matchers:2.5.1"
    testCompile "com.shazam:shazamcrest:0.11"
    testCompile 'com.greghaskins:spectrum:1.2.0'
    testCompile "org.mockito:mockito-core:+"
    testCompile("org.assertj:assertj-core:+")

    doclava 'com.google.doclava:doclava:1.0.6'
}

compileJava {
    String relativePath = "build/generated/src/main/java"
    sourceSets.main.java { srcDir relativePath }
    File generatedSourceDir = project.file("build/generated/src/main/java")
    project.mkdir(generatedSourceDir)
    options.annotationProcessorGeneratedSourcesDirectory = generatedSourceDir
    outputs.dir(generatedSourceDir)

    doFirst {
        // force a clean of generatedSourceDir to prevent java.lang.IllegalStateException: endPosTable already set. This shouldn't be need if using Gradle 4.8+ or Java 9+.
        project.delete(generatedSourceDir)
        project.mkdir(generatedSourceDir)
    }
}

test {
    testLogging {
        events "PASSED", "STARTED", "FAILED", "SKIPPED", "standard_out", "standard_error"
    }
}

license {
    exclude "**/Immutable*"
}

xjc {
    includeInMainCompilation = false
}

xjcGenerate {
    source = fileTree('src/main/resources/XtraServer_Mapping.xsd')
    bindingFiles = fileTree('src/main/resources/bindings.xjb')
    outputDirectory = file('src/main/java')
    targetPackage = 'de.interactive_instruments.xtraserver.config.schema'
}

javadoc {
    exclude 'de/interactive_instruments/xtraserver/config/schema/*'
    options.doclet = "com.google.doclava.Doclava"
    options.docletpath = configurations.doclava.files.asType(List)
    title = null

}
tasks.javadoc.dependsOn configurations.doclava

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
}

license {
    header file('./gradle/license-header')
    strictCheck true
    includes(['**/*.java'])
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ext.name = "interactive instruments GmbH"
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier "sources"
            }
        }
    }
}

if(project.hasProperty('bintrayUser')) {
  bintray {
      user = project.bintrayUser
      key = project.bintrayApiKey
      publications = ['maven']
      publish = true
      pkg {
          repo = 'maven'
          name = project.name
          userOrg = 'iide'
          licenses = ['Apache-2.0']
          websiteUrl = "https://github.com/interactive-instruments/${project.name}"
          issueTrackerUrl = "https://github.com/interactive-instruments/${project.name}/issues"
          vcsUrl = "https://github.com/interactive-instruments/${project.name}.git"
          githubRepo = "interactive-instruments/${project.name}"
          githubReleaseNotesFile = 'README.md'
          version {
              name = project.version
          }
      }
  }
}
